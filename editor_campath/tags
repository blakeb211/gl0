!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
A	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
ADDITIVE	.\olcPixelGameEngine.h	/^		ADDITIVE,$/;"	m	class:olc::DecalMode
ALPHA	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, MASK, ALPHA, CUSTOM };$/;"	e	enum:olc::Pixel::Mode
AddFile	.\olcPixelGameEngine.h	/^	bool ResourcePack::AddFile(const std::string& sFile)$/;"	f	class:olc::ResourcePack
B	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
BACK	.\olcPixelGameEngine.h	/^		BACK, ESCAPE, RETURN, ENTER, PAUSE, SCROLL,$/;"	e	enum:olc::Key
BLUE_SCALE_FACTOR	.\cam_path_editor.cpp	/^constexpr auto BLUE_SCALE_FACTOR = 3;$/;"	v
C	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
CALLSTYLE	.\olcPixelGameEngine.h	3449;"	d
CALLSTYLE	.\olcPixelGameEngine.h	3465;"	d
CALLSTYLE	.\olcPixelGameEngine.h	3482;"	d
CAPS_LOCK	.\olcPixelGameEngine.h	/^		CAPS_LOCK, ENUM_END$/;"	e	enum:olc::Key
COMMA	.\olcPixelGameEngine.h	/^		EQUALS, COMMA, MINUS,$/;"	e	enum:olc::Key
COORD_SCALE_FACTOR	.\cam_path_editor.cpp	/^constexpr auto COORD_SCALE_FACTOR = 3;$/;"	v
CPS_FROM_PPM_SAMPLING_RATE	.\cam_path_editor.cpp	/^constexpr auto CPS_FROM_PPM_SAMPLING_RATE = 10;$/;"	v
CTRL	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
CUSTOM	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, MASK, ALPHA, CUSTOM };$/;"	e	enum:olc::Pixel::Mode
CamPath	.\cam_path_editor.cpp	/^  CamPath(vector<vec3> control_points) { cps = control_points; }$/;"	f	struct:CamPath
CamPath	.\cam_path_editor.cpp	/^struct CamPath {$/;"	s	file:
Clear	.\olcPixelGameEngine.h	/^	void PixelGameEngine::Clear(Pixel p)$/;"	f	class:olc::PixelGameEngine
ClearBuffer	.\olcPixelGameEngine.h	/^	void PixelGameEngine::ClearBuffer(Pixel p, bool bDepth)$/;"	f	class:olc::PixelGameEngine
Construct	.\olcPixelGameEngine.h	/^	olc::rcode PixelGameEngine::Construct(int32_t screen_w, int32_t screen_h, int32_t pixel_w, int32_t pixel_h, bool full_screen, bool vsync, bool cohesion)$/;"	f	class:olc::PixelGameEngine
ConvertS2W	.\olcPixelGameEngine.h	/^		std::wstring ConvertS2W(std::string s)$/;"	f	class:olc::ImageLoader_GDIPlus
ConvertS2W	.\olcPixelGameEngine.h	/^		std::wstring ConvertS2W(std::string s)$/;"	f	class:olc::Platform_Windows
Create	.\olcPixelGameEngine.h	/^	void Renderable::Create(uint32_t width, uint32_t height, bool filter, bool clamp)$/;"	f	class:olc::Renderable
CreateLayer	.\olcPixelGameEngine.h	/^	uint32_t PixelGameEngine::CreateLayer()$/;"	f	class:olc::PixelGameEngine
D	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
DEL	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
DOWN	.\olcPixelGameEngine.h	/^		UP, DOWN, LEFT, RIGHT,$/;"	e	enum:olc::Key
Decal	.\olcPixelGameEngine.h	/^	Decal::Decal(const uint32_t nExistingTextureResource, olc::Sprite* spr)$/;"	f	class:olc::Decal
Decal	.\olcPixelGameEngine.h	/^	Decal::Decal(olc::Sprite* spr, bool filter, bool clamp)$/;"	f	class:olc::Decal
Decal	.\olcPixelGameEngine.h	/^	class Decal$/;"	c	namespace:olc
Decal	.\olcPixelGameEngine.h	/^	olc::Decal* Renderable::Decal() const$/;"	f	class:olc::Renderable
DecalInstance	.\olcPixelGameEngine.h	/^	struct DecalInstance$/;"	s	namespace:olc
DecalMode	.\olcPixelGameEngine.h	/^	enum class DecalMode$/;"	c	namespace:olc
Draw	.\olcPixelGameEngine.h	/^	bool PixelGameEngine::Draw(const olc::vi2d& pos, Pixel p)$/;"	f	class:olc::PixelGameEngine
Draw	.\olcPixelGameEngine.h	/^	bool PixelGameEngine::Draw(int32_t x, int32_t y, Pixel p)$/;"	f	class:olc::PixelGameEngine
DrawCircle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawCircle(const olc::vi2d& pos, int32_t radius, Pixel p, uint8_t mask)$/;"	f	class:olc::PixelGameEngine
DrawCircle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawCircle(int32_t x, int32_t y, int32_t radius, Pixel p, uint8_t mask)$/;"	f	class:olc::PixelGameEngine
DrawDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawDecal(const olc::vf2d& pos, olc::Decal* decal, const olc::vf2d& scale, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawExplicitDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawExplicitDecal(olc::Decal* decal, const olc::vf2d* pos, const olc::vf2d* uv, const olc::Pixel* col, uint32_t elements)$/;"	f	class:olc::PixelGameEngine
DrawFunct	.\olcPixelGameEngine.h	/^		static void DrawFunct() {$/;"	f	class:olc::Platform_GLUT
DrawLine	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawLine(const olc::vi2d& pos1, const olc::vi2d& pos2, Pixel p, uint32_t pattern)$/;"	f	class:olc::PixelGameEngine
DrawLine	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawLine(int32_t x1, int32_t y1, int32_t x2, int32_t y2, Pixel p, uint32_t pattern)$/;"	f	class:olc::PixelGameEngine
DrawPartialDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialDecal(const olc::vf2d& pos, const olc::vf2d& size, olc::Decal* decal, const olc::vf2d& source_pos, const olc::vf2d& source_size, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawPartialDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialDecal(const olc::vf2d& pos, olc::Decal* decal, const olc::vf2d& source_pos, const olc::vf2d& source_size, const olc::vf2d& scale, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawPartialRotatedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialRotatedDecal(const olc::vf2d& pos, olc::Decal* decal, const float fAngle, const olc::vf2d& center, const olc::vf2d& source_pos, const olc::vf2d& source_size, const olc::vf2d& scale, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawPartialSprite	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialSprite(const olc::vi2d& pos, Sprite* sprite, const olc::vi2d& sourcepos, const olc::vi2d& size, uint32_t scale, uint8_t flip)$/;"	f	class:olc::PixelGameEngine
DrawPartialSprite	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialSprite(int32_t x, int32_t y, Sprite* sprite, int32_t ox, int32_t oy, int32_t w, int32_t h, uint32_t scale, uint8_t flip)$/;"	f	class:olc::PixelGameEngine
DrawPartialWarpedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialWarpedDecal(olc::Decal* decal, const olc::vf2d(&pos)[4], const olc::vf2d& source_pos, const olc::vf2d& source_size, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawPartialWarpedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialWarpedDecal(olc::Decal* decal, const olc::vf2d* pos, const olc::vf2d& source_pos, const olc::vf2d& source_size, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawPartialWarpedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPartialWarpedDecal(olc::Decal* decal, const std::array<olc::vf2d, 4>& pos, const olc::vf2d& source_pos, const olc::vf2d& source_size, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawPolygonDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawPolygonDecal(olc::Decal* decal, const std::vector<olc::vf2d>& pos, const std::vector<olc::vf2d>& uv, const olc::Pixel tint)$/;"	f	class:olc::PixelGameEngine
DrawRect	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawRect(const olc::vi2d& pos, const olc::vi2d& size, Pixel p)$/;"	f	class:olc::PixelGameEngine
DrawRect	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawRect(int32_t x, int32_t y, int32_t w, int32_t h, Pixel p)$/;"	f	class:olc::PixelGameEngine
DrawRotatedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawRotatedDecal(const olc::vf2d& pos, olc::Decal* decal, const float fAngle, const olc::vf2d& center, const olc::vf2d& scale, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawSprite	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawSprite(const olc::vi2d& pos, Sprite* sprite, uint32_t scale, uint8_t flip)$/;"	f	class:olc::PixelGameEngine
DrawSprite	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawSprite(int32_t x, int32_t y, Sprite* sprite, uint32_t scale, uint8_t flip)$/;"	f	class:olc::PixelGameEngine
DrawString	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawString(const olc::vi2d& pos, const std::string& sText, Pixel col, uint32_t scale)$/;"	f	class:olc::PixelGameEngine
DrawString	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawString(int32_t x, int32_t y, const std::string& sText, Pixel col, uint32_t scale)$/;"	f	class:olc::PixelGameEngine
DrawStringDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawStringDecal(const olc::vf2d& pos, const std::string& sText, const Pixel col, const olc::vf2d& scale)$/;"	f	class:olc::PixelGameEngine
DrawStringProp	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawStringProp(const olc::vi2d& pos, const std::string& sText, Pixel col, uint32_t scale)$/;"	f	class:olc::PixelGameEngine
DrawStringProp	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawStringProp(int32_t x, int32_t y, const std::string& sText, Pixel col, uint32_t scale)$/;"	f	class:olc::PixelGameEngine
DrawStringPropDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawStringPropDecal(const olc::vf2d& pos, const std::string& sText, const Pixel col, const olc::vf2d& scale)$/;"	f	class:olc::PixelGameEngine
DrawTriangle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawTriangle(const olc::vi2d& pos1, const olc::vi2d& pos2, const olc::vi2d& pos3, Pixel p)$/;"	f	class:olc::PixelGameEngine
DrawTriangle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawTriangle(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t x3, int32_t y3, Pixel p)$/;"	f	class:olc::PixelGameEngine
DrawWarpedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawWarpedDecal(olc::Decal* decal, const olc::vf2d(&pos)[4], const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawWarpedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawWarpedDecal(olc::Decal* decal, const olc::vf2d* pos, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
DrawWarpedDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::DrawWarpedDecal(olc::Decal* decal, const std::array<olc::vf2d, 4>& pos, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
Duplicate	.\olcPixelGameEngine.h	/^	olc::Sprite* Sprite::Duplicate()$/;"	f	class:olc::Sprite
Duplicate	.\olcPixelGameEngine.h	/^	olc::Sprite* Sprite::Duplicate(const olc::vi2d& vPos, const olc::vi2d& vSize)$/;"	f	class:olc::Sprite
E	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
END	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
ENTER	.\olcPixelGameEngine.h	/^		BACK, ESCAPE, RETURN, ENTER, PAUSE, SCROLL,$/;"	e	enum:olc::Key
ENUM_END	.\olcPixelGameEngine.h	/^		CAPS_LOCK, ENUM_END$/;"	e	enum:olc::Key
EQUALS	.\olcPixelGameEngine.h	/^		EQUALS, COMMA, MINUS,$/;"	e	enum:olc::Key
ESCAPE	.\olcPixelGameEngine.h	/^		BACK, ESCAPE, RETURN, ENTER, PAUSE, SCROLL,$/;"	e	enum:olc::Key
EnableLayer	.\olcPixelGameEngine.h	/^	void PixelGameEngine::EnableLayer(uint8_t layer, bool b)$/;"	f	class:olc::PixelGameEngine
EngineThread	.\olcPixelGameEngine.h	/^	void PixelGameEngine::EngineThread()$/;"	f	class:olc::PixelGameEngine
Example	.\cam_path_editor.cpp	/^  Example(vector<vec3> cps) {$/;"	f	class:Example
Example	.\cam_path_editor.cpp	/^class Example : public olc::PixelGameEngine {$/;"	c	file:
ExitMainLoop	.\olcPixelGameEngine.h	/^		static void ExitMainLoop() {$/;"	f	class:olc::Platform_GLUT
F	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
F1	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F10	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F11	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F12	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F2	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F3	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F4	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F5	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F6	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F7	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F8	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
F9	.\olcPixelGameEngine.h	/^		F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,$/;"	e	enum:olc::Key
FAIL	.\olcPixelGameEngine.h	/^	enum rcode { FAIL = 0, OK = 1, NO_FILE = -1 };$/;"	e	enum:olc::rcode
FillCircle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::FillCircle(const olc::vi2d& pos, int32_t radius, Pixel p)$/;"	f	class:olc::PixelGameEngine
FillCircle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::FillCircle(int32_t x, int32_t y, int32_t radius, Pixel p)$/;"	f	class:olc::PixelGameEngine
FillRect	.\olcPixelGameEngine.h	/^	void PixelGameEngine::FillRect(const olc::vi2d& pos, const olc::vi2d& size, Pixel p)$/;"	f	class:olc::PixelGameEngine
FillRect	.\olcPixelGameEngine.h	/^	void PixelGameEngine::FillRect(int32_t x, int32_t y, int32_t w, int32_t h, Pixel p)$/;"	f	class:olc::PixelGameEngine
FillRectDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::FillRectDecal(const olc::vf2d& pos, const olc::vf2d& size, const olc::Pixel col)$/;"	f	class:olc::PixelGameEngine
FillTriangle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::FillTriangle(const olc::vi2d& pos1, const olc::vi2d& pos2, const olc::vi2d& pos3, Pixel p)$/;"	f	class:olc::PixelGameEngine
FillTriangle	.\olcPixelGameEngine.h	/^	void PixelGameEngine::FillTriangle(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t x3, int32_t y3, Pixel p)$/;"	f	class:olc::PixelGameEngine
Flip	.\olcPixelGameEngine.h	/^		enum Flip { NONE = 0, HORIZ = 1, VERT = 2 };$/;"	g	class:olc::Sprite
G	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
GDIPlusStartup	.\olcPixelGameEngine.h	/^		GDIPlusStartup()$/;"	f	class:olc::GDIPlusStartup
GDIPlusStartup	.\olcPixelGameEngine.h	/^	static class GDIPlusStartup$/;"	c	namespace:olc
GL_CLAMP	.\olcPixelGameEngine.h	3484;"	d
GL_GLEXT_PROTOTYPES	.\olcPixelGameEngine.h	3479;"	d
GL_SILENCE_DEPRECATION	.\olcPixelGameEngine.h	3131;"	d
GL_SILENCE_DEPRECATION	.\olcPixelGameEngine.h	3470;"	d
GL_SILENCE_DEPRECATION	.\olcPixelGameEngine.h	402;"	d
GLchar	.\olcPixelGameEngine.h	/^	typedef char GLchar;$/;"	t	namespace:olc
GLsizeiptr	.\olcPixelGameEngine.h	/^	typedef ptrdiff_t GLsizeiptr;$/;"	t	namespace:olc
GetData	.\olcPixelGameEngine.h	/^	Pixel* Sprite::GetData()$/;"	f	class:olc::Sprite
GetDrawTarget	.\olcPixelGameEngine.h	/^	Sprite* PixelGameEngine::GetDrawTarget() const$/;"	f	class:olc::PixelGameEngine
GetDrawTargetHeight	.\olcPixelGameEngine.h	/^	int32_t PixelGameEngine::GetDrawTargetHeight() const$/;"	f	class:olc::PixelGameEngine
GetDrawTargetWidth	.\olcPixelGameEngine.h	/^	int32_t PixelGameEngine::GetDrawTargetWidth() const$/;"	f	class:olc::PixelGameEngine
GetElapsedTime	.\olcPixelGameEngine.h	/^	float PixelGameEngine::GetElapsedTime() const$/;"	f	class:olc::PixelGameEngine
GetFPS	.\olcPixelGameEngine.h	/^	uint32_t PixelGameEngine::GetFPS() const$/;"	f	class:olc::PixelGameEngine
GetFileBuffer	.\olcPixelGameEngine.h	/^	ResourceBuffer ResourcePack::GetFileBuffer(const std::string& sFile)$/;"	f	class:olc::ResourcePack
GetFontSprite	.\olcPixelGameEngine.h	/^	olc::Sprite* PixelGameEngine::GetFontSprite()$/;"	f	class:olc::PixelGameEngine
GetKey	.\olcPixelGameEngine.h	/^	HWButton PixelGameEngine::GetKey(Key k) const$/;"	f	class:olc::PixelGameEngine
GetLayers	.\olcPixelGameEngine.h	/^	std::vector<LayerDesc>& PixelGameEngine::GetLayers()$/;"	f	class:olc::PixelGameEngine
GetMouse	.\olcPixelGameEngine.h	/^	HWButton PixelGameEngine::GetMouse(uint32_t b) const$/;"	f	class:olc::PixelGameEngine
GetMousePos	.\olcPixelGameEngine.h	/^	const olc::vi2d& PixelGameEngine::GetMousePos() const$/;"	f	class:olc::PixelGameEngine
GetMouseWheel	.\olcPixelGameEngine.h	/^	int32_t PixelGameEngine::GetMouseWheel() const$/;"	f	class:olc::PixelGameEngine
GetMouseX	.\olcPixelGameEngine.h	/^	int32_t PixelGameEngine::GetMouseX() const$/;"	f	class:olc::PixelGameEngine
GetMouseY	.\olcPixelGameEngine.h	/^	int32_t PixelGameEngine::GetMouseY() const$/;"	f	class:olc::PixelGameEngine
GetPixel	.\olcPixelGameEngine.h	/^	Pixel Sprite::GetPixel(const olc::vi2d& a) const$/;"	f	class:olc::Sprite
GetPixel	.\olcPixelGameEngine.h	/^	Pixel Sprite::GetPixel(int32_t x, int32_t y) const$/;"	f	class:olc::Sprite
GetPixelMode	.\olcPixelGameEngine.h	/^	Pixel::Mode PixelGameEngine::GetPixelMode()$/;"	f	class:olc::PixelGameEngine
GetPixelSize	.\olcPixelGameEngine.h	/^	const olc::vi2d& PixelGameEngine::GetPixelSize() const$/;"	f	class:olc::PixelGameEngine
GetScreenPixelSize	.\olcPixelGameEngine.h	/^	const olc::vi2d& PixelGameEngine::GetScreenPixelSize() const$/;"	f	class:olc::PixelGameEngine
GetTextSize	.\olcPixelGameEngine.h	/^	olc::vi2d PixelGameEngine::GetTextSize(const std::string& s)$/;"	f	class:olc::PixelGameEngine
GetTextSizeProp	.\olcPixelGameEngine.h	/^	olc::vi2d PixelGameEngine::GetTextSizeProp(const std::string& s)$/;"	f	class:olc::PixelGameEngine
GetWindowMouse	.\olcPixelGameEngine.h	/^	const olc::vi2d& PixelGameEngine::GetWindowMouse() const$/;"	f	class:olc::PixelGameEngine
GetWindowSize	.\olcPixelGameEngine.h	/^	const olc::vi2d& PixelGameEngine::GetWindowSize() const$/;"	f	class:olc::PixelGameEngine
GradientFillRectDecal	.\olcPixelGameEngine.h	/^	void PixelGameEngine::GradientFillRectDecal(const olc::vf2d& pos, const olc::vf2d& size, const olc::Pixel colTL, const olc::Pixel colBL, const olc::Pixel colBR, const olc::Pixel colTR)$/;"	f	class:olc::PixelGameEngine
H	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
HOME	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
HORIZ	.\olcPixelGameEngine.h	/^		enum Flip { NONE = 0, HORIZ = 1, VERT = 2 };$/;"	e	enum:olc::Sprite::Flip
HWButton	.\olcPixelGameEngine.h	/^	struct HWButton$/;"	s	namespace:olc
I	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
ILLUMINATE	.\olcPixelGameEngine.h	/^		ILLUMINATE,$/;"	m	class:olc::DecalMode
INS	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
ImageLoader	.\olcPixelGameEngine.h	/^	class ImageLoader$/;"	c	namespace:olc
ImageLoader_GDIPlus	.\olcPixelGameEngine.h	/^		ImageLoader_GDIPlus() : ImageLoader()$/;"	f	class:olc::ImageLoader_GDIPlus
ImageLoader_GDIPlus	.\olcPixelGameEngine.h	/^	class ImageLoader_GDIPlus : public olc::ImageLoader$/;"	c	namespace:olc
ImageLoader_LibPNG	.\olcPixelGameEngine.h	/^		ImageLoader_LibPNG() : ImageLoader()$/;"	f	class:olc::ImageLoader_LibPNG
ImageLoader_LibPNG	.\olcPixelGameEngine.h	/^	class ImageLoader_LibPNG : public olc::ImageLoader$/;"	c	namespace:olc
ImageLoader_STB	.\olcPixelGameEngine.h	/^		ImageLoader_STB() : ImageLoader()$/;"	f	class:olc::ImageLoader_STB
ImageLoader_STB	.\olcPixelGameEngine.h	/^	class ImageLoader_STB : public olc::ImageLoader$/;"	c	namespace:olc
ImageRGB	.\ppm_reader.h	/^struct ImageRGB {$/;"	s
IsFocused	.\olcPixelGameEngine.h	/^	bool PixelGameEngine::IsFocused() const$/;"	f	class:olc::PixelGameEngine
J	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
K	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
K0	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K1	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K2	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K3	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K4	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K5	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K6	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K7	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K8	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
K9	.\olcPixelGameEngine.h	/^		K0, K1, K2, K3, K4, K5, K6, K7, K8, K9,$/;"	e	enum:olc::Key
Key	.\olcPixelGameEngine.h	/^	enum Key$/;"	g	namespace:olc
L	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
LEFT	.\olcPixelGameEngine.h	/^		UP, DOWN, LEFT, RIGHT,$/;"	e	enum:olc::Key
LayerDesc	.\olcPixelGameEngine.h	/^	struct LayerDesc$/;"	s	namespace:olc
Load	.\olcPixelGameEngine.h	/^	olc::rcode Renderable::Load(const std::string& sFile, ResourcePack* pack, bool filter, bool clamp)$/;"	f	class:olc::Renderable
LoadFromFile	.\olcPixelGameEngine.h	/^	olc::rcode Sprite::LoadFromFile(const std::string& sImageFile, olc::ResourcePack* pack)$/;"	f	class:olc::Sprite
LoadPack	.\olcPixelGameEngine.h	/^	bool ResourcePack::LoadPack(const std::string& sFile, const std::string& sKey)$/;"	f	class:olc::ResourcePack
Loaded	.\olcPixelGameEngine.h	/^	bool ResourcePack::Loaded()$/;"	f	class:olc::ResourcePack
M	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
MASK	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, MASK, ALPHA, CUSTOM };$/;"	e	enum:olc::Pixel::Mode
MINUS	.\olcPixelGameEngine.h	/^		EQUALS, COMMA, MINUS,$/;"	e	enum:olc::Key
MULTIPLICATIVE	.\olcPixelGameEngine.h	/^		MULTIPLICATIVE,$/;"	m	class:olc::DecalMode
MainLoop	.\olcPixelGameEngine.h	/^		static void MainLoop()$/;"	f	class:olc::Platform_Emscripten
Mode	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, MASK, ALPHA, CUSTOM };$/;"	g	struct:olc::Pixel
Mode	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, PERIODIC };$/;"	g	class:olc::Sprite
N	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
NOMINMAX	.\olcPixelGameEngine.h	449;"	d
NONE	.\olcPixelGameEngine.h	/^		NONE,$/;"	e	enum:olc::Key
NONE	.\olcPixelGameEngine.h	/^		enum Flip { NONE = 0, HORIZ = 1, VERT = 2 };$/;"	e	enum:olc::Sprite::Flip
NORMAL	.\olcPixelGameEngine.h	/^		NORMAL,$/;"	m	class:olc::DecalMode
NORMAL	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, MASK, ALPHA, CUSTOM };$/;"	e	enum:olc::Pixel::Mode
NORMAL	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, PERIODIC };$/;"	e	enum:olc::Sprite::Mode
NO_FILE	.\olcPixelGameEngine.h	/^	enum rcode { FAIL = 0, OK = 1, NO_FILE = -1 };$/;"	e	enum:olc::rcode
NP0	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP1	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP2	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP3	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP4	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP5	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP6	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP7	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP8	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP9	.\olcPixelGameEngine.h	/^		NP0, NP1, NP2, NP3, NP4, NP5, NP6, NP7, NP8, NP9,$/;"	e	enum:olc::Key
NP_ADD	.\olcPixelGameEngine.h	/^		NP_MUL, NP_DIV, NP_ADD, NP_SUB, NP_DECIMAL, PERIOD,$/;"	e	enum:olc::Key
NP_DECIMAL	.\olcPixelGameEngine.h	/^		NP_MUL, NP_DIV, NP_ADD, NP_SUB, NP_DECIMAL, PERIOD,$/;"	e	enum:olc::Key
NP_DIV	.\olcPixelGameEngine.h	/^		NP_MUL, NP_DIV, NP_ADD, NP_SUB, NP_DECIMAL, PERIOD,$/;"	e	enum:olc::Key
NP_MUL	.\olcPixelGameEngine.h	/^		NP_MUL, NP_DIV, NP_ADD, NP_SUB, NP_DECIMAL, PERIOD,$/;"	e	enum:olc::Key
NP_SUB	.\olcPixelGameEngine.h	/^		NP_MUL, NP_DIV, NP_ADD, NP_SUB, NP_DECIMAL, PERIOD,$/;"	e	enum:olc::Key
O	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
OEM_1	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OEM_2	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OEM_3	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OEM_4	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OEM_5	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OEM_6	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OEM_7	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OEM_8	.\olcPixelGameEngine.h	/^		OEM_1, OEM_2, OEM_3, OEM_4, OEM_5, OEM_6, OEM_7, OEM_8,$/;"	e	enum:olc::Key
OGL_LOAD	.\olcPixelGameEngine.h	3450;"	d
OGL_LOAD	.\olcPixelGameEngine.h	3466;"	d
OGL_LOAD	.\olcPixelGameEngine.h	3485;"	d
OK	.\olcPixelGameEngine.h	/^	enum rcode { FAIL = 0, OK = 1, NO_FILE = -1 };$/;"	e	enum:olc::rcode
OLC_GFX_OPENGL10	.\olcPixelGameEngine.h	422;"	d
OLC_GFX_OPENGL33	.\olcPixelGameEngine.h	420;"	d
OLC_IMAGE_GDI	.\olcPixelGameEngine.h	431;"	d
OLC_IMAGE_LIBPNG	.\olcPixelGameEngine.h	434;"	d
OLC_MAX_VERTS	.\olcPixelGameEngine.h	/^	constexpr size_t OLC_MAX_VERTS = 128;$/;"	v
OLC_PGE_APPLICATION	.\cam_path_editor.cpp	4;"	d	file:
OLC_PGE_APPLICATION	.\olcPixelGameEngine.h	1144;"	d
OLC_PGE_DEF	.\olcPixelGameEngine.h	325;"	d
OLC_PLATFORM_EMSCRIPTEN	.\olcPixelGameEngine.h	406;"	d
OLC_PLATFORM_GLUT	.\olcPixelGameEngine.h	403;"	d
OLC_PLATFORM_WINAPI	.\olcPixelGameEngine.h	396;"	d
OLC_PLATFORM_X11	.\olcPixelGameEngine.h	399;"	d
OnAfterUserCreate	.\olcPixelGameEngine.h	/^	void PGEX::OnAfterUserCreate()	{}$/;"	f	class:olc::PGEX
OnAfterUserUpdate	.\olcPixelGameEngine.h	/^	void PGEX::OnAfterUserUpdate(float fElapsedTime) {}$/;"	f	class:olc::PGEX
OnBeforeUserCreate	.\olcPixelGameEngine.h	/^	void PGEX::OnBeforeUserCreate() {}$/;"	f	class:olc::PGEX
OnBeforeUserUpdate	.\olcPixelGameEngine.h	/^	void PGEX::OnBeforeUserUpdate(float& fElapsedTime) {}$/;"	f	class:olc::PGEX
OnUserCreate	.\olcPixelGameEngine.h	/^	bool PixelGameEngine::OnUserCreate()$/;"	f	class:olc::PixelGameEngine
OnUserDestroy	.\olcPixelGameEngine.h	/^	bool PixelGameEngine::OnUserDestroy()$/;"	f	class:olc::PixelGameEngine
OnUserUpdate	.\olcPixelGameEngine.h	/^	bool PixelGameEngine::OnUserUpdate(float fElapsedTime)$/;"	f	class:olc::PixelGameEngine
P	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
PAUSE	.\olcPixelGameEngine.h	/^		BACK, ESCAPE, RETURN, ENTER, PAUSE, SCROLL,$/;"	e	enum:olc::Key
PERIOD	.\olcPixelGameEngine.h	/^		NP_MUL, NP_DIV, NP_ADD, NP_SUB, NP_DECIMAL, PERIOD,$/;"	e	enum:olc::Key
PERIODIC	.\olcPixelGameEngine.h	/^		enum Mode { NORMAL, PERIODIC };$/;"	e	enum:olc::Sprite::Mode
PGDN	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
PGEX	.\olcPixelGameEngine.h	/^	PGEX::PGEX(bool bHook) { if(bHook) pge->pgex_Register(this); }$/;"	f	class:olc::PGEX
PGEX	.\olcPixelGameEngine.h	/^	class PGEX$/;"	c	namespace:olc
PGE_USE_CUSTOM_START	.\olcPixelGameEngine.h	413;"	d
PGE_VER	.\olcPixelGameEngine.h	350;"	d
PGUP	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
Pixel	.\olcPixelGameEngine.h	/^	Pixel::Pixel()$/;"	f	class:olc::Pixel
Pixel	.\olcPixelGameEngine.h	/^	Pixel::Pixel(uint32_t p)$/;"	f	class:olc::Pixel
Pixel	.\olcPixelGameEngine.h	/^	Pixel::Pixel(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)$/;"	f	class:olc::Pixel
Pixel	.\olcPixelGameEngine.h	/^	struct Pixel$/;"	s	namespace:olc
PixelF	.\olcPixelGameEngine.h	/^	Pixel PixelF(float red, float green, float blue, float alpha)$/;"	f	namespace:olc
PixelGameEngine	.\olcPixelGameEngine.h	/^	PixelGameEngine::PixelGameEngine()$/;"	f	class:olc::PixelGameEngine
PixelGameEngine	.\olcPixelGameEngine.h	/^	class PixelGameEngine$/;"	c	namespace:olc
PixelLerp	.\olcPixelGameEngine.h	/^	Pixel PixelLerp(const olc::Pixel& p1, const olc::Pixel& p2, float t)$/;"	f	namespace:olc
Platform	.\olcPixelGameEngine.h	/^	class Platform$/;"	c	namespace:olc
Platform_Emscripten	.\olcPixelGameEngine.h	/^	class Platform_Emscripten : public olc::Platform$/;"	c	namespace:olc
Platform_GLUT	.\olcPixelGameEngine.h	/^	class Platform_GLUT : public olc::Platform$/;"	c	namespace:olc
Platform_Linux	.\olcPixelGameEngine.h	/^	class Platform_Linux : public olc::Platform$/;"	c	namespace:olc
Platform_Windows	.\olcPixelGameEngine.h	/^	class Platform_Windows : public olc::Platform$/;"	c	namespace:olc
Q	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
R	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
RETURN	.\olcPixelGameEngine.h	/^		BACK, ESCAPE, RETURN, ENTER, PAUSE, SCROLL,$/;"	e	enum:olc::Key
RGB	.\ppm_reader.h	/^struct RGB {$/;"	s
RIGHT	.\olcPixelGameEngine.h	/^		UP, DOWN, LEFT, RIGHT,$/;"	e	enum:olc::Key
Renderable	.\olcPixelGameEngine.h	/^	class Renderable$/;"	c	namespace:olc
Renderer	.\olcPixelGameEngine.h	/^	class Renderer$/;"	c	namespace:olc
Renderer_OGL10	.\olcPixelGameEngine.h	/^	class Renderer_OGL10 : public olc::Renderer$/;"	c	namespace:olc
Renderer_OGL33	.\olcPixelGameEngine.h	/^	class Renderer_OGL33 : public olc::Renderer$/;"	c	namespace:olc
ResourceBuffer	.\olcPixelGameEngine.h	/^	ResourceBuffer::ResourceBuffer(std::ifstream& ifs, uint32_t offset, uint32_t size)$/;"	f	class:olc::ResourceBuffer
ResourceBuffer	.\olcPixelGameEngine.h	/^	struct ResourceBuffer : public std::streambuf$/;"	s	namespace:olc
ResourcePack	.\olcPixelGameEngine.h	/^	ResourcePack::ResourcePack() { }$/;"	f	class:olc::ResourcePack
ResourcePack	.\olcPixelGameEngine.h	/^	class ResourcePack : public std::streambuf$/;"	c	namespace:olc
S	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
SCROLL	.\olcPixelGameEngine.h	/^		BACK, ESCAPE, RETURN, ENTER, PAUSE, SCROLL,$/;"	e	enum:olc::Key
SHIFT	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
SPACE	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
STB_IMAGE_IMPLEMENTATION	.\olcPixelGameEngine.h	4221;"	d
STENCIL	.\olcPixelGameEngine.h	/^		STENCIL,$/;"	m	class:olc::DecalMode
Sample	.\olcPixelGameEngine.h	/^	Pixel Sprite::Sample(float x, float y) const$/;"	f	class:olc::Sprite
SampleBL	.\olcPixelGameEngine.h	/^	Pixel Sprite::SampleBL(float u, float v) const$/;"	f	class:olc::Sprite
SavePack	.\olcPixelGameEngine.h	/^	bool ResourcePack::SavePack(const std::string& sFile, const std::string& sKey)$/;"	f	class:olc::ResourcePack
ScreenHeight	.\olcPixelGameEngine.h	/^	int32_t PixelGameEngine::ScreenHeight() const$/;"	f	class:olc::PixelGameEngine
ScreenWidth	.\olcPixelGameEngine.h	/^	int32_t PixelGameEngine::ScreenWidth() const$/;"	f	class:olc::PixelGameEngine
SetDecalMode	.\olcPixelGameEngine.h	/^		void SetDecalMode(const olc::DecalMode& mode)$/;"	f	class:olc::Renderer_OGL10
SetDecalMode	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetDecalMode(const olc::DecalMode& mode)$/;"	f	class:olc::PixelGameEngine
SetDrawTarget	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetDrawTarget(Sprite* target)$/;"	f	class:olc::PixelGameEngine
SetDrawTarget	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetDrawTarget(uint8_t layer)$/;"	f	class:olc::PixelGameEngine
SetLayerCustomRenderFunction	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetLayerCustomRenderFunction(uint8_t layer, std::function<void()> f)$/;"	f	class:olc::PixelGameEngine
SetLayerOffset	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetLayerOffset(uint8_t layer, const olc::vf2d& offset)$/;"	f	class:olc::PixelGameEngine
SetLayerOffset	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetLayerOffset(uint8_t layer, float x, float y)$/;"	f	class:olc::PixelGameEngine
SetLayerScale	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetLayerScale(uint8_t layer, const olc::vf2d& scale)$/;"	f	class:olc::PixelGameEngine
SetLayerScale	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetLayerScale(uint8_t layer, float x, float y)$/;"	f	class:olc::PixelGameEngine
SetLayerTint	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetLayerTint(uint8_t layer, const olc::Pixel& tint)$/;"	f	class:olc::PixelGameEngine
SetPixel	.\olcPixelGameEngine.h	/^	bool Sprite::SetPixel(const olc::vi2d& a, Pixel p)$/;"	f	class:olc::Sprite
SetPixel	.\olcPixelGameEngine.h	/^	bool Sprite::SetPixel(int32_t x, int32_t y, Pixel p)$/;"	f	class:olc::Sprite
SetPixelBlend	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetPixelBlend(float fBlend)$/;"	f	class:olc::PixelGameEngine
SetPixelMode	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetPixelMode(Pixel::Mode m)$/;"	f	class:olc::PixelGameEngine
SetPixelMode	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetPixelMode(std::function<olc::Pixel(const int x, const int y, const olc::Pixel&, const olc::Pixel&)> pixelMode)$/;"	f	class:olc::PixelGameEngine
SetSampleMode	.\olcPixelGameEngine.h	/^	void Sprite::SetSampleMode(olc::Sprite::Mode mode)$/;"	f	class:olc::Sprite
SetScreenSize	.\olcPixelGameEngine.h	/^	void PixelGameEngine::SetScreenSize(int w, int h)$/;"	f	class:olc::PixelGameEngine
Sprite	.\olcPixelGameEngine.h	/^	Sprite::Sprite()$/;"	f	class:olc::Sprite
Sprite	.\olcPixelGameEngine.h	/^	Sprite::Sprite(const std::string& sImageFile, olc::ResourcePack* pack)$/;"	f	class:olc::Sprite
Sprite	.\olcPixelGameEngine.h	/^	Sprite::Sprite(int32_t w, int32_t h)$/;"	f	class:olc::Sprite
Sprite	.\olcPixelGameEngine.h	/^	class Sprite$/;"	c	namespace:olc
Sprite	.\olcPixelGameEngine.h	/^	olc::Sprite* Renderable::Sprite() const$/;"	f	class:olc::Renderable
Start	.\olcPixelGameEngine.h	/^	olc::rcode PixelGameEngine::Start()$/;"	f	class:olc::PixelGameEngine
T	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
TAB	.\olcPixelGameEngine.h	/^		SPACE, TAB, SHIFT, CTRL, INS, DEL, HOME, END, PGUP, PGDN,$/;"	e	enum:olc::Key
ThreadFunct	.\olcPixelGameEngine.h	/^		static void ThreadFunct() {$/;"	f	class:olc::Platform_GLUT
U	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
UNUSED	.\olcPixelGameEngine.h	386;"	d
UP	.\olcPixelGameEngine.h	/^		UP, DOWN, LEFT, RIGHT,$/;"	e	enum:olc::Key
USE_EXPERIMENTAL_FS	.\olcPixelGameEngine.h	356;"	d
USE_EXPERIMENTAL_FS	.\olcPixelGameEngine.h	359;"	d
USE_EXPERIMENTAL_FS	.\olcPixelGameEngine.h	364;"	d
Update	.\olcPixelGameEngine.h	/^	void Decal::Update()$/;"	f	class:olc::Decal
UpdateSprite	.\olcPixelGameEngine.h	/^	void Decal::UpdateSprite()$/;"	f	class:olc::Decal
UpdateWindowSize	.\olcPixelGameEngine.h	/^		void UpdateWindowSize(int width, int height)$/;"	f	class:olc::Platform_Emscripten
V	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
VC_EXTRALEAN	.\olcPixelGameEngine.h	446;"	d
VERT	.\olcPixelGameEngine.h	/^		enum Flip { NONE = 0, HORIZ = 1, VERT = 2 };$/;"	e	enum:olc::Sprite::Flip
View	.\cam_path_editor.cpp	/^enum class View {$/;"	c	file:
W	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
WIREFRAME	.\olcPixelGameEngine.h	/^		WIREFRAME,$/;"	m	class:olc::DecalMode
WORLD_X_MAX	.\cam_path_editor.cpp	/^auto WORLD_X_MAX = 50.0f;$/;"	v
WORLD_Y_MAX	.\cam_path_editor.cpp	/^auto WORLD_Y_MAX = 30.0f;$/;"	v
X	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
X11	.\olcPixelGameEngine.h	/^	namespace X11$/;"	n
Y	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
Z	.\olcPixelGameEngine.h	/^		A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,$/;"	e	enum:olc::Key
ZX	.\cam_path_editor.cpp	/^  ZX = 1,$/;"	m	class:View	file:
ZY	.\cam_path_editor.cpp	/^  ZY = 0,$/;"	m	class:View	file:
_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING	.\olcPixelGameEngine.h	371;"	d
_WIN32_WINNT	.\olcPixelGameEngine.h	455;"	d
_WIN32_WINNT	.\olcPixelGameEngine.h	457;"	d
_WINSOCKAPI_	.\olcPixelGameEngine.h	444;"	d
_WINSOCKAPI_	.\olcPixelGameEngine.h	462;"	d
a	.\olcPixelGameEngine.h	/^			struct { uint8_t r; uint8_t g; uint8_t b; uint8_t a; };$/;"	m	struct:olc::Pixel::__anon1::__anon2
b	.\olcPixelGameEngine.h	/^			struct { uint8_t r; uint8_t g; uint8_t b; uint8_t a; };$/;"	m	struct:olc::Pixel::__anon1::__anon2
b	.\ppm_reader.h	/^    unsigned char r, g, b;$/;"	m	struct:RGB
bActiveRef	.\olcPixelGameEngine.h	/^		static std::atomic<bool>* bActiveRef;$/;"	m	class:olc::Platform_GLUT
bAtomActive	.\olcPixelGameEngine.h	/^		static std::atomic<bool> bAtomActive;$/;"	m	class:olc::PixelGameEngine
bEnableVSYNC	.\olcPixelGameEngine.h	/^		bool		bEnableVSYNC = false;$/;"	m	class:olc::PixelGameEngine
bFullScreen	.\olcPixelGameEngine.h	/^		bool		bFullScreen = false;$/;"	m	class:olc::PixelGameEngine
bHasInputFocus	.\olcPixelGameEngine.h	/^		bool		bHasInputFocus = false;$/;"	m	class:olc::PixelGameEngine
bHasMouseFocus	.\olcPixelGameEngine.h	/^		bool		bHasMouseFocus = false;$/;"	m	class:olc::PixelGameEngine
bHeld	.\olcPixelGameEngine.h	/^		bool bHeld = false;		\/\/ Set true for all frames between pressed and released events$/;"	m	struct:olc::HWButton
bPixelCohesion	.\olcPixelGameEngine.h	/^		bool        bPixelCohesion = false;$/;"	m	class:olc::PixelGameEngine
bPressed	.\olcPixelGameEngine.h	/^		bool bPressed = false;	\/\/ Set once during the frame the event occurs$/;"	m	struct:olc::HWButton
bReleased	.\olcPixelGameEngine.h	/^		bool bReleased = false;	\/\/ Set once during the frame the event occurs$/;"	m	struct:olc::HWButton
bShow	.\olcPixelGameEngine.h	/^		bool bShow = false;$/;"	m	struct:olc::LayerDesc
bSync	.\olcPixelGameEngine.h	/^		bool bSync = false;$/;"	m	class:olc::Renderer_OGL10
bSync	.\olcPixelGameEngine.h	/^		bool bSync = false;$/;"	m	class:olc::Renderer_OGL33
bUpdate	.\olcPixelGameEngine.h	/^		bool bUpdate = false;$/;"	m	struct:olc::LayerDesc
baseFile	.\olcPixelGameEngine.h	/^		std::ifstream baseFile;$/;"	m	class:olc::ResourcePack
cam_dir	.\cam_path_editor.cpp	/^  vector<vec3> cam_dir;$/;"	m	struct:CamPath	file:
ceil	.\olcPixelGameEngine.h	/^		v2d_generic  ceil() const { return v2d_generic(std::ceil(x), std::ceil(y)); }$/;"	f	struct:olc::v2d_generic
col	.\olcPixelGameEngine.h	/^			olc::Pixel col;$/;"	m	struct:olc::Renderer_OGL33::locVertex
comp_xmax	.\cam_path_editor.cpp	/^constexpr auto comp_xmax = [](const glm::vec3 &a, const glm::vec3 &b) -> bool {$/;"	v
comp_ymax	.\cam_path_editor.cpp	/^constexpr auto comp_ymax = [](const glm::vec3 &a, const glm::vec3 &b) -> bool {$/;"	v
comp_zmax	.\cam_path_editor.cpp	/^constexpr auto comp_zmax = [](const glm::vec3 &a, const glm::vec3 &b) -> bool {$/;"	v
cps	.\cam_path_editor.cpp	/^  vector<vec3> cps;$/;"	m	class:Example	file:
cps	.\cam_path_editor.cpp	/^  vector<vec3> cps;$/;"	m	struct:CamPath	file:
createPathFromCps	.\cam_path_editor.cpp	/^  void createPathFromCps() {$/;"	f	struct:CamPath
cross	.\olcPixelGameEngine.h	/^		T cross(const v2d_generic& rhs) const { return this->x * rhs.y - this->y * rhs.x; }$/;"	f	struct:olc::v2d_generic
data	.\ppm_reader.h	/^    std::vector<RGB> data;$/;"	m	struct:ImageRGB
decal	.\olcPixelGameEngine.h	/^		olc::Decal* decal = nullptr;$/;"	m	struct:olc::DecalInstance
dot	.\olcPixelGameEngine.h	/^		T dot(const v2d_generic& rhs) const { return this->x * rhs.x + this->y * rhs.y; }$/;"	f	struct:olc::v2d_generic
fBlendFactor	.\olcPixelGameEngine.h	/^		float		fBlendFactor = 1.0f;$/;"	m	class:olc::PixelGameEngine
fFrameTimer	.\olcPixelGameEngine.h	/^		float		fFrameTimer = 1.0f;$/;"	m	class:olc::PixelGameEngine
fLastElapsed	.\olcPixelGameEngine.h	/^		float		fLastElapsed = 0.0f;$/;"	m	class:olc::PixelGameEngine
floor	.\olcPixelGameEngine.h	/^		v2d_generic  floor() const { return v2d_generic(std::floor(x), std::floor(y)); }$/;"	f	struct:olc::v2d_generic
focus_callback	.\olcPixelGameEngine.h	/^		static EM_BOOL focus_callback(int eventType, const EmscriptenFocusEvent* focusEvent, void* userData) $/;"	f	class:olc::Platform_Emscripten
fontDecal	.\olcPixelGameEngine.h	/^		Decal*      fontDecal = nullptr;$/;"	m	class:olc::PixelGameEngine
fontSprite	.\olcPixelGameEngine.h	/^		Sprite*     fontSprite = nullptr;$/;"	m	class:olc::PixelGameEngine
frameCnt	.\cam_path_editor.cpp	/^size_t frameCnt = 0;$/;"	v
funcHook	.\olcPixelGameEngine.h	/^		std::function<void()> funcHook = nullptr;$/;"	m	struct:olc::LayerDesc
funcPixelMode	.\olcPixelGameEngine.h	/^		std::function<olc::Pixel(const int x, const int y, const olc::Pixel&, const olc::Pixel&)> funcPixelMode;$/;"	m	class:olc::PixelGameEngine
g	.\olcPixelGameEngine.h	/^			struct { uint8_t r; uint8_t g; uint8_t b; uint8_t a; };$/;"	m	struct:olc::Pixel::__anon1::__anon2
g	.\ppm_reader.h	/^    unsigned char r, g, b;$/;"	m	struct:RGB
gdistartup	.\olcPixelGameEngine.h	/^	} gdistartup;$/;"	v	typeref:class:olc::GDIPlusStartup
get_cps_from_ppm	.\cam_path_editor.cpp	/^vector<vec3> get_cps_from_ppm(fs::path path) {$/;"	f
glDeviceContext	.\olcPixelGameEngine.h	/^		glDeviceContext_t glDeviceContext = 0;$/;"	m	class:olc::Renderer_OGL33
glDeviceContext_t	.\olcPixelGameEngine.h	/^	typedef HDC glDeviceContext_t;$/;"	t
glDeviceContext_t	.\olcPixelGameEngine.h	/^	typedef X11::GLXContext glDeviceContext_t;$/;"	t
glRenderContext	.\olcPixelGameEngine.h	/^		glRenderContext_t glRenderContext = 0;$/;"	m	class:olc::Renderer_OGL33
glRenderContext_t	.\olcPixelGameEngine.h	/^	typedef HGLRC glRenderContext_t;$/;"	t
glRenderContext_t	.\olcPixelGameEngine.h	/^	typedef X11::GLXContext glRenderContext_t;$/;"	t
glSwapIntervalEXT	.\olcPixelGameEngine.h	/^	static glSwapInterval_t* glSwapIntervalEXT;$/;"	v
glSwapInterval_t	.\olcPixelGameEngine.h	/^	typedef int(glSwapInterval_t)(X11::Display* dpy, X11::GLXDrawable drawable, int interval);$/;"	t
h	.\ppm_reader.h	/^    int w, h;$/;"	m	struct:ImageRGB
height	.\olcPixelGameEngine.h	/^		int32_t height = 0;$/;"	m	class:olc::Sprite
id	.\olcPixelGameEngine.h	/^		int32_t id = -1;$/;"	m	class:olc::Decal
inv	.\olcPixelGameEngine.h	/^	Pixel Pixel::inv() const$/;"	f	class:olc::Pixel
is_level_file	.\cam_path_editor.cpp	/^bool is_level_file(string fName) { return true; }$/;"	f
is_ppm_file	.\cam_path_editor.cpp	/^bool is_ppm_file(fs::path path) {$/;"	f
keyboard_callback	.\olcPixelGameEngine.h	/^		static EM_BOOL keyboard_callback(int eventType, const EmscriptenKeyboardEvent* e, void* userData)$/;"	f	class:olc::Platform_Emscripten
loader	.\olcPixelGameEngine.h	/^		static std::unique_ptr<olc::ImageLoader> loader;$/;"	m	class:olc::Sprite
loader	.\olcPixelGameEngine.h	/^	std::unique_ptr<ImageLoader> olc::Sprite::loader = nullptr;$/;"	m	class:olc::olc::Sprite
locAttachShader	.\olcPixelGameEngine.h	/^		locAttachShader_t* locAttachShader = nullptr;$/;"	m	class:olc::Renderer_OGL33
locAttachShader_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locAttachShader_t(GLuint program, GLuint shader);$/;"	t	namespace:olc
locBindBuffer	.\olcPixelGameEngine.h	/^		locBindBuffer_t* locBindBuffer = nullptr;$/;"	m	class:olc::Renderer_OGL33
locBindBuffer_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locBindBuffer_t(GLenum target, GLuint buffer);$/;"	t	namespace:olc
locBindVertexArray	.\olcPixelGameEngine.h	/^		locBindVertexArray_t* locBindVertexArray = nullptr;$/;"	m	class:olc::Renderer_OGL33
locBindVertexArray_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locBindVertexArray_t(GLuint array);$/;"	t	namespace:olc
locBufferData	.\olcPixelGameEngine.h	/^		locBufferData_t* locBufferData = nullptr;$/;"	m	class:olc::Renderer_OGL33
locBufferData_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locBufferData_t(GLenum target, GLsizeiptr size, const void* data, GLenum usage);$/;"	t	namespace:olc
locCompileShader	.\olcPixelGameEngine.h	/^		locCompileShader_t* locCompileShader = nullptr;$/;"	m	class:olc::Renderer_OGL33
locCompileShader_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locCompileShader_t(GLuint shader);$/;"	t	namespace:olc
locCreateProgram	.\olcPixelGameEngine.h	/^		locCreateProgram_t* locCreateProgram = nullptr;$/;"	m	class:olc::Renderer_OGL33
locCreateProgram_t	.\olcPixelGameEngine.h	/^	typedef GLuint CALLSTYLE locCreateProgram_t(void);$/;"	t	namespace:olc
locCreateShader	.\olcPixelGameEngine.h	/^		locCreateShader_t* locCreateShader = nullptr;$/;"	m	class:olc::Renderer_OGL33
locCreateShader_t	.\olcPixelGameEngine.h	/^	typedef GLuint CALLSTYLE locCreateShader_t(GLenum type);$/;"	t	namespace:olc
locDeleteProgram	.\olcPixelGameEngine.h	/^		locDeleteProgram_t* locDeleteProgram = nullptr;$/;"	m	class:olc::Renderer_OGL33
locDeleteProgram_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locDeleteProgram_t(GLuint program);$/;"	t	namespace:olc
locDeleteShader	.\olcPixelGameEngine.h	/^		locDeleteShader_t* locDeleteShader = nullptr;$/;"	m	class:olc::Renderer_OGL33
locDeleteShader_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locDeleteShader_t(GLuint shader);$/;"	t	namespace:olc
locEnableVertexAttribArray	.\olcPixelGameEngine.h	/^		locEnableVertexAttribArray_t* locEnableVertexAttribArray = nullptr;$/;"	m	class:olc::Renderer_OGL33
locEnableVertexAttribArray_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locEnableVertexAttribArray_t(GLuint index);$/;"	t	namespace:olc
locGenBuffers	.\olcPixelGameEngine.h	/^		locGenBuffers_t* locGenBuffers = nullptr;$/;"	m	class:olc::Renderer_OGL33
locGenBuffers_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locGenBuffers_t(GLsizei n, GLuint* buffers);$/;"	t	namespace:olc
locGenVertexArrays	.\olcPixelGameEngine.h	/^		locGenVertexArrays_t* locGenVertexArrays = nullptr;$/;"	m	class:olc::Renderer_OGL33
locGenVertexArrays_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locGenVertexArrays_t(GLsizei n, GLuint* arrays);$/;"	t	namespace:olc
locGetShaderInfoLog	.\olcPixelGameEngine.h	/^		locGetShaderInfoLog_t* locGetShaderInfoLog = nullptr;$/;"	m	class:olc::Renderer_OGL33
locGetShaderInfoLog_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locGetShaderInfoLog_t(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);$/;"	t	namespace:olc
locLinkProgram	.\olcPixelGameEngine.h	/^		locLinkProgram_t* locLinkProgram = nullptr;$/;"	m	class:olc::Renderer_OGL33
locLinkProgram_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locLinkProgram_t(GLuint program);$/;"	t	namespace:olc
locShaderSource	.\olcPixelGameEngine.h	/^		locShaderSource_t* locShaderSource = nullptr;$/;"	m	class:olc::Renderer_OGL33
locShaderSource_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locShaderSource_t(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);$/;"	t	namespace:olc
locShaderSource_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locShaderSource_t(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);$/;"	t	namespace:olc
locSwapInterval	.\olcPixelGameEngine.h	/^		locSwapInterval_t* locSwapInterval = nullptr;$/;"	m	class:olc::Renderer_OGL33
locSwapInterval_t	.\olcPixelGameEngine.h	/^	typedef EGLBoolean(locSwapInterval_t)(EGLDisplay display, EGLint interval);$/;"	t
locSwapInterval_t	.\olcPixelGameEngine.h	/^	typedef int(locSwapInterval_t)(X11::Display* dpy, X11::GLXDrawable drawable, int interval);$/;"	t
locSwapInterval_t	.\olcPixelGameEngine.h	/^	typedef void __stdcall locSwapInterval_t(GLsizei n);$/;"	t
locUseProgram	.\olcPixelGameEngine.h	/^		locUseProgram_t* locUseProgram = nullptr;$/;"	m	class:olc::Renderer_OGL33
locUseProgram_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locUseProgram_t(GLuint program);$/;"	t	namespace:olc
locVertex	.\olcPixelGameEngine.h	/^		struct locVertex$/;"	s	class:olc::Renderer_OGL33
locVertexAttribPointer	.\olcPixelGameEngine.h	/^		locVertexAttribPointer_t* locVertexAttribPointer = nullptr;$/;"	m	class:olc::Renderer_OGL33
locVertexAttribPointer_t	.\olcPixelGameEngine.h	/^	typedef void CALLSTYLE locVertexAttribPointer_t(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);$/;"	t	namespace:olc
mFullScreen	.\olcPixelGameEngine.h	/^		bool mFullScreen = false;$/;"	m	class:olc::Renderer_OGL10
mFullScreen	.\olcPixelGameEngine.h	/^		bool mFullScreen = false;$/;"	m	class:olc::Renderer_OGL33
m_nFS	.\olcPixelGameEngine.h	/^		uint32_t m_nFS = 0;$/;"	m	class:olc::Renderer_OGL33
m_nQuadShader	.\olcPixelGameEngine.h	/^		uint32_t m_nQuadShader = 0;$/;"	m	class:olc::Renderer_OGL33
m_nVS	.\olcPixelGameEngine.h	/^		uint32_t m_nVS = 0;$/;"	m	class:olc::Renderer_OGL33
m_tp1	.\olcPixelGameEngine.h	/^		std::chrono::time_point<std::chrono::system_clock> m_tp1, m_tp2;$/;"	m	class:olc::PixelGameEngine
m_tp2	.\olcPixelGameEngine.h	/^		std::chrono::time_point<std::chrono::system_clock> m_tp1, m_tp2;$/;"	m	class:olc::PixelGameEngine
m_vaQuad	.\olcPixelGameEngine.h	/^		uint32_t m_vaQuad = 0;$/;"	m	class:olc::Renderer_OGL33
m_vbQuad	.\olcPixelGameEngine.h	/^		uint32_t m_vbQuad = 0;$/;"	m	class:olc::Renderer_OGL33
mag	.\olcPixelGameEngine.h	/^		T mag() const { return T(std::sqrt(x * x + y * y)); }$/;"	f	struct:olc::v2d_generic
mag2	.\olcPixelGameEngine.h	/^		T mag2() const { return x * x + y * y; }$/;"	f	struct:olc::v2d_generic
main	.\cam_path_editor.cpp	/^int main(int argc, char **argv) {$/;"	f
makeposix	.\olcPixelGameEngine.h	/^	std::string ResourcePack::makeposix(const std::string& path)$/;"	f	class:olc::ResourcePack
mapFiles	.\olcPixelGameEngine.h	/^		std::map<std::string, sResourceFile> mapFiles;$/;"	m	class:olc::ResourcePack
mapKeys	.\olcPixelGameEngine.h	/^	static std::map<size_t, uint8_t> mapKeys;$/;"	v
max	.\olcPixelGameEngine.h	/^		v2d_generic  max(const v2d_generic& v) const { return v2d_generic(std::max(x, v.x), std::max(y, v.y)); }$/;"	f	struct:olc::v2d_generic
max	.\olcPixelGameEngine.h	3970;"	d
max	.\olcPixelGameEngine.h	3980;"	d
min	.\olcPixelGameEngine.h	/^		v2d_generic  min(const v2d_generic& v) const { return v2d_generic(std::min(x, v.x), std::min(y, v.y)); }$/;"	f	struct:olc::v2d_generic
min	.\olcPixelGameEngine.h	3969;"	d
min	.\olcPixelGameEngine.h	3979;"	d
mode	.\olcPixelGameEngine.h	/^		olc::DecalMode mode = olc::DecalMode::NORMAL;$/;"	m	struct:olc::DecalInstance
modeSample	.\olcPixelGameEngine.h	/^		Mode modeSample = Mode::NORMAL;$/;"	m	class:olc::Sprite
mouse_callback	.\olcPixelGameEngine.h	/^		static EM_BOOL mouse_callback(int eventType, const EmscriptenMouseEvent* e, void* userData)$/;"	f	class:olc::Platform_Emscripten
n	.\olcPixelGameEngine.h	/^			uint32_t n = nDefaultPixel;$/;"	m	union:olc::Pixel::__anon1
nDecalMode	.\olcPixelGameEngine.h	/^		DecalMode   nDecalMode = DecalMode::NORMAL;$/;"	m	class:olc::PixelGameEngine
nDecalMode	.\olcPixelGameEngine.h	/^		olc::DecalMode nDecalMode = olc::DecalMode(-1); \/\/ Thanks Gusgo & Bispoo$/;"	m	class:olc::Renderer_OGL10
nDecalMode	.\olcPixelGameEngine.h	/^		olc::DecalMode nDecalMode = olc::DecalMode(-1); \/\/ Thanks Gusgo & Bispoo$/;"	m	class:olc::Renderer_OGL33
nDefaultAlpha	.\olcPixelGameEngine.h	/^	constexpr uint8_t  nDefaultAlpha = 0xFF;$/;"	v
nDefaultPixel	.\olcPixelGameEngine.h	/^	constexpr uint32_t nDefaultPixel = (nDefaultAlpha << 24);$/;"	v
nFrameCount	.\olcPixelGameEngine.h	/^		int			nFrameCount = 0;$/;"	m	class:olc::PixelGameEngine
nLastFPS	.\olcPixelGameEngine.h	/^		uint32_t	nLastFPS = 0;$/;"	m	class:olc::PixelGameEngine
nMouseButtons	.\olcPixelGameEngine.h	/^	constexpr uint8_t  nMouseButtons = 5;$/;"	v
nMouseWheelDelta	.\olcPixelGameEngine.h	/^		int32_t		nMouseWheelDelta = 0;$/;"	m	class:olc::PixelGameEngine
nMouseWheelDeltaCache	.\olcPixelGameEngine.h	/^		int32_t		nMouseWheelDeltaCache = 0;$/;"	m	class:olc::PixelGameEngine
nOffset	.\olcPixelGameEngine.h	/^		struct sResourceFile { uint32_t nSize; uint32_t nOffset; };$/;"	m	struct:olc::ResourcePack::sResourceFile
nPixelMode	.\olcPixelGameEngine.h	/^		Pixel::Mode	nPixelMode = Pixel::NORMAL;$/;"	m	class:olc::PixelGameEngine
nResID	.\olcPixelGameEngine.h	/^		uint32_t nResID = 0;$/;"	m	struct:olc::LayerDesc
nSize	.\olcPixelGameEngine.h	/^		struct sResourceFile { uint32_t nSize; uint32_t nOffset; };$/;"	m	struct:olc::ResourcePack::sResourceFile
nTargetLayer	.\olcPixelGameEngine.h	/^		uint8_t		nTargetLayer = 0;$/;"	m	class:olc::PixelGameEngine
norm	.\olcPixelGameEngine.h	/^		v2d_generic  norm() const { T r = 1 \/ mag(); return v2d_generic(x * r, y * r); }$/;"	f	struct:olc::v2d_generic
olc	.\olcPixelGameEngine.h	/^namespace olc {$/;"	n
olc	.\olcPixelGameEngine.h	/^namespace olc$/;"	n
olcT	.\olcPixelGameEngine.h	381;"	d
olcT	.\olcPixelGameEngine.h	383;"	d
olc_ColourMap	.\olcPixelGameEngine.h	/^		X11::Colormap                olc_ColourMap;$/;"	m	class:olc::Platform_Linux
olc_Config	.\olcPixelGameEngine.h	/^		EGLConfig olc_Config;$/;"	m	class:olc::Renderer_OGL33
olc_ConfigureSystem	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_ConfigureSystem()$/;"	f	class:olc::PixelGameEngine
olc_ConstructFontSheet	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_ConstructFontSheet()$/;"	f	class:olc::PixelGameEngine
olc_Context	.\olcPixelGameEngine.h	/^		EGLContext olc_Context;$/;"	m	class:olc::Renderer_OGL33
olc_CoreUpdate	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_CoreUpdate()$/;"	f	class:olc::PixelGameEngine
olc_Display	.\olcPixelGameEngine.h	/^		EGLDisplay olc_Display;$/;"	m	class:olc::Renderer_OGL33
olc_Display	.\olcPixelGameEngine.h	/^		X11::Display* olc_Display = nullptr;$/;"	m	class:olc::Platform_Linux
olc_Display	.\olcPixelGameEngine.h	/^		X11::Display* olc_Display = nullptr;$/;"	m	class:olc::Renderer_OGL10
olc_Display	.\olcPixelGameEngine.h	/^		X11::Display* olc_Display = nullptr;$/;"	m	class:olc::Renderer_OGL33
olc_IsRunning	.\olcPixelGameEngine.h	/^	bool PixelGameEngine::olc_IsRunning()$/;"	f	class:olc::PixelGameEngine
olc_OnPageUnload	.\olcPixelGameEngine.h	/^	EMSCRIPTEN_KEEPALIVE inline int olc_OnPageUnload()$/;"	f
olc_PGE_UpdateWindowSize	.\olcPixelGameEngine.h	/^	EMSCRIPTEN_KEEPALIVE inline void olc_PGE_UpdateWindowSize(int width, int height)$/;"	f
olc_PrepareEngine	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_PrepareEngine()$/;"	f	class:olc::PixelGameEngine
olc_Reanimate	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_Reanimate()$/;"	f	class:olc::PixelGameEngine
olc_SetWindowAttribs	.\olcPixelGameEngine.h	/^		X11::XSetWindowAttributes    olc_SetWindowAttribs;$/;"	m	class:olc::Platform_Linux
olc_Surface	.\olcPixelGameEngine.h	/^		EGLSurface olc_Surface;$/;"	m	class:olc::Renderer_OGL33
olc_Terminate	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_Terminate()$/;"	f	class:olc::PixelGameEngine
olc_UpdateKeyFocus	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateKeyFocus(bool state)$/;"	f	class:olc::PixelGameEngine
olc_UpdateKeyState	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateKeyState(int32_t key, bool state)$/;"	f	class:olc::PixelGameEngine
olc_UpdateMouse	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateMouse(int32_t x, int32_t y)$/;"	f	class:olc::PixelGameEngine
olc_UpdateMouseFocus	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateMouseFocus(bool state)$/;"	f	class:olc::PixelGameEngine
olc_UpdateMouseState	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateMouseState(int32_t button, bool state)$/;"	f	class:olc::PixelGameEngine
olc_UpdateMouseWheel	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateMouseWheel(int32_t delta)$/;"	f	class:olc::PixelGameEngine
olc_UpdateViewport	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateViewport()$/;"	f	class:olc::PixelGameEngine
olc_UpdateWindowSize	.\olcPixelGameEngine.h	/^	void PixelGameEngine::olc_UpdateWindowSize(int32_t x, int32_t y)$/;"	f	class:olc::PixelGameEngine
olc_VisualInfo	.\olcPixelGameEngine.h	/^		X11::XVisualInfo* olc_VisualInfo = nullptr;$/;"	m	class:olc::Renderer_OGL10
olc_VisualInfo	.\olcPixelGameEngine.h	/^		X11::XVisualInfo* olc_VisualInfo = nullptr;$/;"	m	class:olc::Renderer_OGL33
olc_VisualInfo	.\olcPixelGameEngine.h	/^		X11::XVisualInfo* olc_VisualInfo;$/;"	m	class:olc::Platform_Linux
olc_Window	.\olcPixelGameEngine.h	/^		X11::Window					 olc_Window;$/;"	m	class:olc::Platform_Linux
olc_Window	.\olcPixelGameEngine.h	/^		X11::Window* olc_Window = nullptr;$/;"	m	class:olc::Renderer_OGL10
olc_Window	.\olcPixelGameEngine.h	/^		X11::Window* olc_Window = nullptr;$/;"	m	class:olc::Renderer_OGL33
olc_WindowEvent	.\olcPixelGameEngine.h	/^		static LRESULT CALLBACK olc_WindowEvent(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)$/;"	f	class:olc::Platform_Windows
olc_WindowRoot	.\olcPixelGameEngine.h	/^		X11::Window					 olc_WindowRoot;$/;"	m	class:olc::Platform_Linux
olc_hWnd	.\olcPixelGameEngine.h	/^		HWND olc_hWnd = nullptr;$/;"	m	class:olc::Platform_Windows
operator !=	.\olcPixelGameEngine.h	/^		bool operator != (const v2d_generic& rhs) const { return (this->x != rhs.x || this->y != rhs.y); }$/;"	f	struct:olc::v2d_generic
operator !=	.\olcPixelGameEngine.h	/^	bool Pixel::operator!=(const Pixel& p) const$/;"	f	class:olc::Pixel
operator *	.\olcPixelGameEngine.h	/^		v2d_generic  operator *  (const T& rhs)           const { return v2d_generic(this->x * rhs, this->y * rhs); }$/;"	f	struct:olc::v2d_generic
operator *	.\olcPixelGameEngine.h	/^		v2d_generic  operator *  (const v2d_generic& rhs) const { return v2d_generic(this->x * rhs.x, this->y * rhs.y); }$/;"	f	struct:olc::v2d_generic
operator *	.\olcPixelGameEngine.h	/^	Pixel  Pixel::operator * (const float i) const$/;"	f	class:olc::Pixel
operator *	.\olcPixelGameEngine.h	/^	template<class T> inline v2d_generic<T> operator * (const double& lhs, const v2d_generic<T>& rhs)$/;"	f	namespace:olc
operator *	.\olcPixelGameEngine.h	/^	template<class T> inline v2d_generic<T> operator * (const float& lhs, const v2d_generic<T>& rhs)$/;"	f	namespace:olc
operator *	.\olcPixelGameEngine.h	/^	template<class T> inline v2d_generic<T> operator * (const int& lhs, const v2d_generic<T>& rhs)$/;"	f	namespace:olc
operator *=	.\olcPixelGameEngine.h	/^		v2d_generic& operator *= (const T& rhs) { this->x *= rhs; this->y *= rhs; return *this; }$/;"	f	struct:olc::v2d_generic
operator *=	.\olcPixelGameEngine.h	/^		v2d_generic& operator *= (const v2d_generic& rhs) { this->x *= rhs.x; this->y *= rhs.y; return *this; }$/;"	f	struct:olc::v2d_generic
operator *=	.\olcPixelGameEngine.h	/^	Pixel& Pixel::operator *=(const float i)$/;"	f	class:olc::Pixel
operator +	.\olcPixelGameEngine.h	/^		v2d_generic  operator +  () const { return { +x, +y }; }$/;"	f	struct:olc::v2d_generic
operator +	.\olcPixelGameEngine.h	/^		v2d_generic  operator +  (const v2d_generic& rhs) const { return v2d_generic(this->x + rhs.x, this->y + rhs.y); }$/;"	f	struct:olc::v2d_generic
operator +	.\olcPixelGameEngine.h	/^	Pixel  Pixel::operator + (const Pixel& p) const$/;"	f	class:olc::Pixel
operator +=	.\olcPixelGameEngine.h	/^		v2d_generic& operator += (const v2d_generic& rhs) { this->x += rhs.x; this->y += rhs.y; return *this; }$/;"	f	struct:olc::v2d_generic
operator +=	.\olcPixelGameEngine.h	/^	Pixel& Pixel::operator += (const Pixel& p)$/;"	f	class:olc::Pixel
operator -	.\olcPixelGameEngine.h	/^		v2d_generic  operator -  () const { return { -x, -y }; }$/;"	f	struct:olc::v2d_generic
operator -	.\olcPixelGameEngine.h	/^		v2d_generic  operator -  (const v2d_generic& rhs) const { return v2d_generic(this->x - rhs.x, this->y - rhs.y); }$/;"	f	struct:olc::v2d_generic
operator -	.\olcPixelGameEngine.h	/^	Pixel  Pixel::operator - (const Pixel& p) const$/;"	f	class:olc::Pixel
operator -=	.\olcPixelGameEngine.h	/^		v2d_generic& operator -= (const v2d_generic& rhs) { this->x -= rhs.x; this->y -= rhs.y; return *this; }$/;"	f	struct:olc::v2d_generic
operator -=	.\olcPixelGameEngine.h	/^	Pixel& Pixel::operator -= (const Pixel& p) \/\/ Thanks Au Lit$/;"	f	class:olc::Pixel
operator /	.\olcPixelGameEngine.h	/^		v2d_generic  operator \/  (const T& rhs)           const { return v2d_generic(this->x \/ rhs, this->y \/ rhs); }$/;"	f	struct:olc::v2d_generic
operator /	.\olcPixelGameEngine.h	/^		v2d_generic  operator \/  (const v2d_generic& rhs) const { return v2d_generic(this->x \/ rhs.x, this->y \/ rhs.y); }$/;"	f	struct:olc::v2d_generic
operator /	.\olcPixelGameEngine.h	/^	Pixel  Pixel::operator \/ (const float i) const$/;"	f	class:olc::Pixel
operator /	.\olcPixelGameEngine.h	/^	template<class T> inline v2d_generic<T> operator \/ (const double& lhs, const v2d_generic<T>& rhs)$/;"	f	namespace:olc
operator /	.\olcPixelGameEngine.h	/^	template<class T> inline v2d_generic<T> operator \/ (const float& lhs, const v2d_generic<T>& rhs)$/;"	f	namespace:olc
operator /	.\olcPixelGameEngine.h	/^	template<class T> inline v2d_generic<T> operator \/ (const int& lhs, const v2d_generic<T>& rhs)$/;"	f	namespace:olc
operator /=	.\olcPixelGameEngine.h	/^		v2d_generic& operator \/= (const T& rhs) { this->x \/= rhs; this->y \/= rhs; return *this; }$/;"	f	struct:olc::v2d_generic
operator /=	.\olcPixelGameEngine.h	/^		v2d_generic& operator \/= (const v2d_generic& rhs) { this->x \/= rhs.x; this->y \/= rhs.y; return *this; }$/;"	f	struct:olc::v2d_generic
operator /=	.\olcPixelGameEngine.h	/^	Pixel& Pixel::operator \/=(const float i)$/;"	f	class:olc::Pixel
operator <	.\olcPixelGameEngine.h	/^	template<class T, class U> inline bool operator < (const v2d_generic<T>& lhs, const v2d_generic<U>& rhs)$/;"	f	namespace:olc
operator <<	.\olcPixelGameEngine.h	/^		friend std::ostream& operator << (std::ostream& os, const v2d_generic& rhs) { os << rhs.str(); return os; }$/;"	f	struct:olc::v2d_generic
operator ==	.\olcPixelGameEngine.h	/^		bool operator == (const v2d_generic& rhs) const { return (this->x == rhs.x && this->y == rhs.y); }$/;"	f	struct:olc::v2d_generic
operator ==	.\olcPixelGameEngine.h	/^	bool Pixel::operator==(const Pixel& p) const$/;"	f	class:olc::Pixel
operator >	.\olcPixelGameEngine.h	/^	template<class T, class U> inline bool operator > (const v2d_generic<T>& lhs, const v2d_generic<U>& rhs)$/;"	f	namespace:olc
operator v2d_generic<double>	.\olcPixelGameEngine.h	/^		operator v2d_generic<double>() const { return { static_cast<double>(this->x), static_cast<double>(this->y) }; }$/;"	f	struct:olc::v2d_generic
operator v2d_generic<float>	.\olcPixelGameEngine.h	/^		operator v2d_generic<float>() const { return { static_cast<float>(this->x), static_cast<float>(this->y) }; }$/;"	f	struct:olc::v2d_generic
operator v2d_generic<int32_t>	.\olcPixelGameEngine.h	/^		operator v2d_generic<int32_t>() const { return { static_cast<int32_t>(this->x), static_cast<int32_t>(this->y) }; }$/;"	f	struct:olc::v2d_generic
pColData	.\olcPixelGameEngine.h	/^		std::vector<olc::Pixel> pColData;$/;"	m	class:olc::Sprite
pDecal	.\olcPixelGameEngine.h	/^		std::unique_ptr<olc::Decal> pDecal = nullptr;$/;"	m	class:olc::Renderable
pDefaultDrawTarget	.\olcPixelGameEngine.h	/^		Sprite*     pDefaultDrawTarget = nullptr;$/;"	m	class:olc::PixelGameEngine
pDrawTarget	.\olcPixelGameEngine.h	/^		Sprite*     pDrawTarget = nullptr;$/;"	m	class:olc::PixelGameEngine
pDrawTarget	.\olcPixelGameEngine.h	/^		olc::Sprite* pDrawTarget = nullptr;$/;"	m	struct:olc::LayerDesc
pKeyNewState	.\olcPixelGameEngine.h	/^		bool		pKeyNewState[256] = { 0 };$/;"	m	class:olc::PixelGameEngine
pKeyOldState	.\olcPixelGameEngine.h	/^		bool		pKeyOldState[256] = { 0 };$/;"	m	class:olc::PixelGameEngine
pKeyboardState	.\olcPixelGameEngine.h	/^		HWButton	pKeyboardState[256] = { 0 };$/;"	m	class:olc::PixelGameEngine
pMouseNewState	.\olcPixelGameEngine.h	/^		bool		pMouseNewState[nMouseButtons] = { 0 };$/;"	m	class:olc::PixelGameEngine
pMouseOldState	.\olcPixelGameEngine.h	/^		bool		pMouseOldState[nMouseButtons] = { 0 };$/;"	m	class:olc::PixelGameEngine
pMouseState	.\olcPixelGameEngine.h	/^		HWButton	pMouseState[nMouseButtons] = { 0 };$/;"	m	class:olc::PixelGameEngine
pSprite	.\olcPixelGameEngine.h	/^		std::unique_ptr<olc::Sprite> pSprite = nullptr;$/;"	m	class:olc::Renderable
pVertexMem	.\olcPixelGameEngine.h	/^		locVertex pVertexMem[OLC_MAX_VERTS];$/;"	m	class:olc::Renderer_OGL33
path	.\cam_path_editor.cpp	/^  unique_ptr<CamPath> path;$/;"	m	class:Example	file:
perp	.\olcPixelGameEngine.h	/^		v2d_generic  perp() const { return v2d_generic(-y, x); }$/;"	f	struct:olc::v2d_generic
pge	.\olcPixelGameEngine.h	/^		static PixelGameEngine* pge;$/;"	m	class:olc::PGEX
pge	.\olcPixelGameEngine.h	/^	olc::PixelGameEngine* olc::PGEX::pge = nullptr;$/;"	m	class:olc::olc::PGEX
pgex_Register	.\olcPixelGameEngine.h	/^	void PixelGameEngine::pgex_Register(olc::PGEX* pgex)$/;"	f	class:olc::PixelGameEngine
platform	.\olcPixelGameEngine.h	/^	static std::unique_ptr<Platform> platform;$/;"	v
pngReadStream	.\olcPixelGameEngine.h	/^	void pngReadStream(png_structp pngPtr, png_bytep data, png_size_t length)$/;"	f	namespace:olc
points	.\olcPixelGameEngine.h	/^		uint32_t points = 0;$/;"	m	struct:olc::DecalInstance
pos	.\olcPixelGameEngine.h	/^			float pos[3];$/;"	m	struct:olc::Renderer_OGL33::locVertex
pos	.\olcPixelGameEngine.h	/^		std::vector<olc::vf2d> pos;$/;"	m	struct:olc::DecalInstance
ptrPGE	.\olcPixelGameEngine.h	/^		static olc::PixelGameEngine* ptrPGE;$/;"	m	class:olc::Platform
ptrPGE	.\olcPixelGameEngine.h	/^		static olc::PixelGameEngine* ptrPGE;$/;"	m	class:olc::Renderer
ptrPGE	.\olcPixelGameEngine.h	/^	olc::PixelGameEngine* olc::Platform::ptrPGE = nullptr;$/;"	m	class:olc::olc::Platform
ptrPGE	.\olcPixelGameEngine.h	/^	olc::PixelGameEngine* olc::Renderer::ptrPGE = nullptr;$/;"	m	class:olc::olc::Renderer
pts	.\cam_path_editor.cpp	/^  vector<vec3> pts;$/;"	m	struct:CamPath	file:
r	.\olcPixelGameEngine.h	/^			struct { uint8_t r; uint8_t g; uint8_t b; uint8_t a; };$/;"	m	struct:olc::Pixel::__anon1::__anon2
r	.\ppm_reader.h	/^    unsigned char r, g, b;$/;"	m	struct:RGB
rcode	.\olcPixelGameEngine.h	/^	enum rcode { FAIL = 0, OK = 1, NO_FILE = -1 };$/;"	g	namespace:olc
read_img_from_ppm	.\ppm_reader.h	/^std::unique_ptr<ImageRGB> read_img_from_ppm(std::string inName) {$/;"	f
read_ppm_header	.\ppm_reader.h	/^std::pair<int, int> read_ppm_header(std::ifstream& in) {$/;"	f
rendBlankQuad	.\olcPixelGameEngine.h	/^		olc::Renderable rendBlankQuad;$/;"	m	class:olc::Renderer_OGL33
renderer	.\olcPixelGameEngine.h	/^	static std::unique_ptr<Renderer> renderer;$/;"	v
sAppName	.\olcPixelGameEngine.h	/^		std::string sAppName;$/;"	m	class:olc::PixelGameEngine
sResourceFile	.\olcPixelGameEngine.h	/^		struct sResourceFile { uint32_t nSize; uint32_t nOffset; };$/;"	s	class:olc::ResourcePack
scramble	.\olcPixelGameEngine.h	/^	std::vector<char> ResourcePack::scramble(const std::vector<char>& data, const std::string& key)$/;"	f	class:olc::ResourcePack
sprite	.\olcPixelGameEngine.h	/^		olc::Sprite* sprite = nullptr;$/;"	m	class:olc::Decal
str	.\olcPixelGameEngine.h	/^		const std::string str() const { return std::string("(") + std::to_string(this->x) + "," + std::to_string(this->y) + ")"; }$/;"	f	struct:olc::v2d_generic
tex	.\olcPixelGameEngine.h	/^			olc::vf2d tex;$/;"	m	struct:olc::Renderer_OGL33::locVertex
tint	.\olcPixelGameEngine.h	/^		olc::Pixel tint = olc::WHITE;$/;"	m	struct:olc::LayerDesc
tint	.\olcPixelGameEngine.h	/^		std::vector<olc::Pixel> tint;$/;"	m	struct:olc::DecalInstance
token	.\olcPixelGameEngine.h	/^		ULONG_PTR	token;$/;"	m	class:olc::GDIPlusStartup
touch_callback	.\olcPixelGameEngine.h	/^		static EM_BOOL touch_callback(int eventType, const EmscriptenTouchEvent* e, void* userData)$/;"	f	class:olc::Platform_Emscripten
uv	.\olcPixelGameEngine.h	/^		std::vector<olc::vf2d> uv;$/;"	m	struct:olc::DecalInstance
v	.\olcPixelGameEngine.h	/^		Pixel& operator = (const Pixel& v) = default;$/;"	m	struct:olc::Pixel
v	.\olcPixelGameEngine.h	/^		v2d_generic& operator=(const v2d_generic& v) = default;$/;"	m	struct:olc::v2d_generic
v2d_generic	.\olcPixelGameEngine.h	/^		v2d_generic() : x(0), y(0) {}$/;"	f	struct:olc::v2d_generic
v2d_generic	.\olcPixelGameEngine.h	/^		v2d_generic(T _x, T _y) : x(_x), y(_y) {}$/;"	f	struct:olc::v2d_generic
v2d_generic	.\olcPixelGameEngine.h	/^		v2d_generic(const v2d_generic& v) : x(v.x), y(v.y) {}$/;"	f	struct:olc::v2d_generic
v2d_generic	.\olcPixelGameEngine.h	/^	struct v2d_generic$/;"	s	namespace:olc
vExtensions	.\olcPixelGameEngine.h	/^		std::vector<olc::PGEX*> vExtensions;$/;"	m	class:olc::PixelGameEngine
vFontSpacing	.\olcPixelGameEngine.h	/^		std::vector<olc::vi2d> vFontSpacing;$/;"	m	class:olc::PixelGameEngine
vInvScreenSize	.\olcPixelGameEngine.h	/^		olc::vf2d	vInvScreenSize = { 1.0f \/ 256.0f, 1.0f \/ 240.0f };$/;"	m	class:olc::PixelGameEngine
vLayers	.\olcPixelGameEngine.h	/^		std::vector<LayerDesc> vLayers;$/;"	m	class:olc::PixelGameEngine
vMemory	.\olcPixelGameEngine.h	/^		std::vector<char> vMemory;$/;"	m	struct:olc::ResourceBuffer
vMousePos	.\olcPixelGameEngine.h	/^		olc::vi2d	vMousePos = { 0, 0 };$/;"	m	class:olc::PixelGameEngine
vMousePosCache	.\olcPixelGameEngine.h	/^		olc::vi2d	vMousePosCache = { 0, 0 };$/;"	m	class:olc::PixelGameEngine
vMouseWindowPos	.\olcPixelGameEngine.h	/^		olc::vi2d   vMouseWindowPos = { 0, 0 };$/;"	m	class:olc::PixelGameEngine
vOffset	.\olcPixelGameEngine.h	/^		olc::vf2d vOffset = { 0, 0 };$/;"	m	struct:olc::LayerDesc
vPixel	.\olcPixelGameEngine.h	/^		olc::vf2d	vPixel = { 1.0f, 1.0f };$/;"	m	class:olc::PixelGameEngine
vPixelSize	.\olcPixelGameEngine.h	/^		olc::vi2d	vPixelSize = { 4, 4 };$/;"	m	class:olc::PixelGameEngine
vScale	.\olcPixelGameEngine.h	/^		olc::vf2d vScale = { 1, 1 };$/;"	m	struct:olc::LayerDesc
vScreenPixelSize	.\olcPixelGameEngine.h	/^		olc::vi2d   vScreenPixelSize = { 4, 4 };$/;"	m	class:olc::PixelGameEngine
vScreenSize	.\olcPixelGameEngine.h	/^		olc::vi2d	vScreenSize = { 256, 240 };$/;"	m	class:olc::PixelGameEngine
vUVScale	.\olcPixelGameEngine.h	/^		olc::vf2d vUVScale = { 1.0f, 1.0f };$/;"	m	class:olc::Decal
vViewPos	.\olcPixelGameEngine.h	/^		olc::vi2d	vViewPos = { 0, 0 };$/;"	m	class:olc::PixelGameEngine
vViewSize	.\olcPixelGameEngine.h	/^		olc::vi2d	vViewSize = { 0,0 };$/;"	m	class:olc::PixelGameEngine
vWindowSize	.\olcPixelGameEngine.h	/^		olc::vi2d	vWindowSize = { 0, 0 };$/;"	m	class:olc::PixelGameEngine
vd2d	.\olcPixelGameEngine.h	/^	typedef v2d_generic<double> vd2d;$/;"	t	namespace:olc
vecDecalInstance	.\olcPixelGameEngine.h	/^		std::vector<DecalInstance> vecDecalInstance;$/;"	m	struct:olc::LayerDesc
vf2d	.\olcPixelGameEngine.h	/^	typedef v2d_generic<float> vf2d;$/;"	t	namespace:olc
vi2d	.\olcPixelGameEngine.h	/^	typedef v2d_generic<int32_t> vi2d;$/;"	t	namespace:olc
vu2d	.\olcPixelGameEngine.h	/^	typedef v2d_generic<uint32_t> vu2d;$/;"	t	namespace:olc
w	.\olcPixelGameEngine.h	/^		std::vector<float> w;$/;"	m	struct:olc::DecalInstance
w	.\ppm_reader.h	/^    int w, h;$/;"	m	struct:ImageRGB
wglSwapInterval	.\olcPixelGameEngine.h	/^	static wglSwapInterval_t* wglSwapInterval = nullptr;$/;"	v
wglSwapInterval_t	.\olcPixelGameEngine.h	/^	typedef BOOL(WINAPI wglSwapInterval_t) (int interval);$/;"	t
wheel_callback	.\olcPixelGameEngine.h	/^		static EM_BOOL wheel_callback(int eventType, const EmscriptenWheelEvent* e, void* userData)$/;"	f	class:olc::Platform_Emscripten
width	.\olcPixelGameEngine.h	/^		int32_t width = 0;$/;"	m	class:olc::Sprite
world_to_screen	.\cam_path_editor.cpp	/^pair<float, float> world_to_screen(const olc::PixelGameEngine *gm,$/;"	f
wsAppName	.\olcPixelGameEngine.h	/^		std::wstring wsAppName;$/;"	m	class:olc::Platform_Windows
x	.\olcPixelGameEngine.h	/^		T x = 0;$/;"	m	struct:olc::v2d_generic
y	.\olcPixelGameEngine.h	/^		T y = 0;$/;"	m	struct:olc::v2d_generic
~Decal	.\olcPixelGameEngine.h	/^	Decal::~Decal()$/;"	f	class:olc::Decal
~GDIPlusStartup	.\olcPixelGameEngine.h	/^		~GDIPlusStartup()$/;"	f	class:olc::GDIPlusStartup
~PixelGameEngine	.\olcPixelGameEngine.h	/^	PixelGameEngine::~PixelGameEngine()$/;"	f	class:olc::PixelGameEngine
~ResourcePack	.\olcPixelGameEngine.h	/^	ResourcePack::~ResourcePack() { baseFile.close(); }$/;"	f	class:olc::ResourcePack
~Sprite	.\olcPixelGameEngine.h	/^	Sprite::~Sprite()$/;"	f	class:olc::Sprite
