!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AddCamPathToRawData	.\main.cpp	/^void AddCamPathToRawData(const VecPP& path, gxb::Level* l) {$/;"	f
BuildLevelVao	.\render.cpp	/^unsigned int render::BuildLevelVao(const gxb::Level* l) {$/;"	f	class:render
BuildSpatialGridVao	.\render.cpp	/^unsigned int render::BuildSpatialGridVao(const std::vector<float>& vertices_octree) {$/;"	f	class:render
CAM_MOVE_SPEED	.\main.cpp	/^constexpr auto CAM_MOVE_SPEED = 0.001f;$/;"	v
CamGoalSeek	.\main.cpp	/^void CamGoalSeek(float delta_time) {$/;"	f
CheckFileExist	.\slurp.cpp	/^  bool CheckFileExist(const string path, const string fname, const string ext)$/;"	f	namespace:slurp
DrawLevel	.\render.cpp	/^void render::DrawLevel(unsigned int vao_entities, glm::mat4& model, Shader& prog_one, unsigned int vao_spatial_grid, gxb::Level* level, std::vector<gxb::PathPt>& path)$/;"	f	class:render
FREE_MOVE	.\main.cpp	/^inline static const auto FREE_MOVE = 0;$/;"	v	file:
FrameBufSizeCallback	.\main.cpp	/^void FrameBufSizeCallback(GLFWwindow* window, int width, int height) {$/;"	f
GetFileContents	.\slurp.cpp	/^  stringstream GetFileContents(const char* filename)$/;"	f	namespace:slurp
GetFileContents	.\slurp.cpp	/^  stringstream GetFileContents(std::string filename)$/;"	f	namespace:slurp
InitGlfw	.\main.cpp	/^GLFWwindow* InitGlfw(unsigned int w, unsigned int h, const char* title,$/;"	f
LoadLevel	.\main.cpp	/^void LoadLevel(std::string name) {$/;"	f
MouseCallback	.\main.cpp	/^void MouseCallback(GLFWwindow* window, double x_pos, double y_pos) {$/;"	f
MouseCallbackNull	.\main.cpp	/^void MouseCallbackNull(GLFWwindow* window, double xpos, double ypos) {$/;"	f
ProcessInputCamOnly	.\main.cpp	/^void ProcessInputCamOnly(GLFWwindow* window, gxb::Camera& cam,$/;"	f
ProcessInputPlayerOnly	.\main.cpp	/^void ProcessInputPlayerOnly(GLFWwindow* window, float delta_time) {$/;"	f
STB_IMAGE_IMPLEMENTATION	.\stb_image.cpp	1;"	d	file:
ScrollCallback	.\main.cpp	/^void ScrollCallback(GLFWwindow* window, double xoffset, double yoffset) {$/;"	f
SelectNextCamPoint	.\main.cpp	/^glm::vec3 SelectNextCamPoint(const gxb::Level* const l, gxb::Camera& cam,$/;"	f
SetGlFlags	.\render.cpp	/^void render::SetGlFlags() {$/;"	f	class:render
SpatialGrid	.\main.cpp	/^namespace SpatialGrid {  \/\/ if SpatialGrid wasn't header only I could remove this$/;"	n	file:
TestNaiveCollision	.\main.cpp	/^void TestNaiveCollision() {$/;"	f
VSYNC	.\main.cpp	/^inline static const auto VSYNC = 0;$/;"	v	file:
_CRT_SECURE_NO_WARNINGS	.\slurp.cpp	1;"	d	file:
clearScreen	.\render.cpp	/^void render::clearScreen() {$/;"	f	class:render
first_mouse	.\main.cpp	/^bool first_mouse = true;$/;"	v
lastY	.\main.cpp	/^float last_x = gxb::SCR_WIDTH \/ 2, lastY = gxb::SCR_HEIGHT \/ 2;$/;"	v
last_x	.\main.cpp	/^float last_x = gxb::SCR_WIDTH \/ 2, lastY = gxb::SCR_HEIGHT \/ 2;$/;"	v
level	.\main.cpp	/^std::unique_ptr<gxb::Level> level = nullptr;$/;"	v
logOpenGLInfo	.\render.cpp	/^void render::logOpenGLInfo() {$/;"	f	class:render
main	.\main.cpp	/^int main() {$/;"	f
path	.\main.cpp	/^std::vector<gxb::PathPt> path;$/;"	v
slurp	.\slurp.cpp	/^namespace slurp {$/;"	n	file:
